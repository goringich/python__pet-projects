services:
  postgres:
    container_name: postgres_container
    image: 'postgres:17.4'
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - 5431:5432
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  pgadmin:
    container_name: pgadmin_container
    image: 'dpage/pgadmin4:9.0.0'
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"  
    restart: unless-stopped

  nginx:
    container_name: nginx_container
    image: 'nginx:1.27.4'
    ports:
      - "9999:80"
    volumes:
      - ./web/static/my-phonebook:/usr/share/nginx/html  
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped
    depends_on:
      - api
      - client

  api:
    container_name: api_container
    build: backend
    command: ["flask", "run", "--host=0.0.0.0", "--debug"]
    volumes:
      - ./backend:/backend
    environment:
      - DB_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - FLASK_ENV=development
      - FLASK_APP=app.py
    depends_on:
      postgres:
        condition: service_healthy


  client:
    container_name: client_container
    build: web
    command: ["npm", "run", "dev", "--", "--host"]
    volumes:
      - ./web/static/my-phonebook:/frontend
      - node-modules:/frontend/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - api

volumes:
  node-modules: